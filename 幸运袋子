#include<iostream>
#include<algorithm>

using namespace std;

int getLuckyPacket(int x[], int n, int pos, int sum, int multi)
{
	int count = 0;
	//循环，搜索以位置i开始所有可能的组合
	for (int i = pos; i < n; i++)
	{
		sum += x[i];
		multi *= x[i];
		if (sum > multi)
		{
			//找到符合要求的组合，加1，继续累加后续的值，看是否有符合要求的集合
			count += 1 + getLuckyPacket(x, n, i + 1, sum, multi);
		}
		else if (x[i] == 1)
		{
			//如何不符合要求，且当前元素值为1，则继续向后搜索
			count += getLuckyPacket(x, n, i + 1, sum, multi);
		}
		else
		{
			//如何sum大于multi,则后面就没有符合要求的组合了
			break;
		}
		//要搜索下一个位置之前，首先恢复sum和multi
		sum -= x[i];
		multi /= x[i];
		//数字相同的球，没有什么区别，都只能算一个组合，所以直接跳过
		while (i < n - 1 && x[i] == x[i + 1])
		{
			i++;
		}
	}
	return count;
}
int main()
{
	int n;
	while (cin >> n)
	{
		int x[n];
		for (int i = 0; i < n; i++)
		{
			cin >> x[i];
		}
		sort(x, x + n);
		//从第一个位置开始搜索
		cout << getLuckyPacket(x, n, 0, 0, 1) << endl;
	}
	return 0;
}

//error
void lucky(int I, int i, int n, int *a, int num, int add, int mul)
{
	for (int j = I + 1; j < n; j++)
	{
		for (int k = j; k < n; k++)
		{
			if ((a[k] + 1) > a[k])
			{
				num++;
				add += a[j];
				mul *= a[j];
				I++;
				lucky(I, i, n, a, num, add, mul);
			}
			//else if (a[k] && a[j])
			//{
			//	while (a[k] != a[j])
			//	{
			//		I++;
			//		m//0
			//		add += 
			//	}
			//}
			else
			{
				I--;
				add -= a[k];
				mul /= a[k];
				lucky(I, i, n, a, num, add, mul);
			}
			while (a[k] == a[k + 1])
				k++;
		}
	}
}
void lucky(int n, int* a, int num, int add, int mul)//
{
	int i;
	for (i = n; i > 0; i--)
	{
		add += a[i];
		mul *= a[i];
		if (add > mul)
		{
			num++;
			lucky(n--, a, num, add, mul);
		}
		else if (a[i] == 1)
		{
			lucky(n--, a, num, add, mul);
		}

		else
		{
			add -= a[i];
			mul /= a[i];
			break;
		}
		add -= a[i];
		mul /= a[i];
		//while ((i < n - 1) && (a[i] == a[i + 1]))
			//i++;
		
	}
	cout << num << endl;
}

int main()
{
	int n;
	while (cin >> n)
	{
		int I = 0, num = 0, add = 0, mul = 1;
		int *a = new int[n];
		for (int i = 0; i < n; i++)
		{
			cin >> a[i];
		}
		for (int i = 0; i < n; i++)
		{
			if (a[i] == 1)
				I++;
		}
		for (int i = 1; i <= I; i++)
		{

			lucky(I, i, n, a, num, add, mul);
		}
		cout << num << endl;

		//cout << lucky(n, a, num) << endl;
		//cout << num << endl;
		//lucky(I, n, a, num, add, mul)
	}

	return 0;
}
